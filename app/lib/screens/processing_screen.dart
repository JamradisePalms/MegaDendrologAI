import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

import '../models/report.dart';
import '../services/api_service.dart';
import '../services/local_analysis.dart';
import 'report_screen.dart';
import '../services/report_service.dart';
import '../services/connectivity_service.dart';
import '../services/analysis_queue_dao.dart';

class ProcessingScreen extends StatefulWidget {
  final File imageFile;

  const ProcessingScreen({super.key, required this.imageFile});

  @override
  _ProcessingScreenState createState() => _ProcessingScreenState();
}

class _ProcessingScreenState extends State<ProcessingScreen> {
  final ApiService _apiService = ApiService();
  final LocalAnalysis _localAnalysis = LocalAnalysis();
  final queueDao = AnalysisQueueDao();

  @override
  void initState() {
    super.initState();
    _analyze();
  }
  Future<void> _analyze() async {
  try {
    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    final docsDir = await getApplicationDocumentsDirectory();
    final fileName = 'report_${DateTime.now().millisecondsSinceEpoch}${p.extension(widget.imageFile.path)}';
    final savedImage = await widget.imageFile.copy(p.join(docsDir.path, fileName));

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    final internetAvailable = await ConnectivityService.hasInternet();

    List<Report> reports = [];
    if (internetAvailable) {
      debugPrint('–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º ApiService –¥–ª—è —Ñ–∞–π–ª–∞: ${savedImage.path}');
      //reports = await _localAnalysis.analyzeImage(savedImage);
      reports = await _apiService.analyzeImage(savedImage);
    } else {
      debugPrint('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º LocalAnalysis –¥–ª—è —Ñ–∞–π–ª–∞: ${savedImage.path}');
      reports = await _localAnalysis.analyzeImage(savedImage);
    }

    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –≤—Å–µ –æ—Ç—á—ë—Ç—ã
    /*final birchReport = Report(
      id: 778, // –ø–æ–∫–∞ –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç, id –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –ë–î
      plantName: '–ë–µ—Ä—ë–∑–∞, 2 –æ–∫—Ç—è–±—Ä—è 2025',
      probability: 92.5,
      species: '–ë–µ—Ä—ë–∑–∞',
      trunkRot: '–ù–µ—Ç',
      trunkHoles: '–ù–µ—Ç',
      trunkCracks: '–ú–µ–ª–∫–∏–µ',
      trunkDamage: '–ù–µ—Ç',
      crownDamage: '–ù–µ—Ç',
      fruitingBodies: '–ù–µ—Ç',
      diseases: '–ù–µ—Ç',
      dryBranchPercentage: 5.0,
      additionalInfo: '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ, –±–µ–∑ –≤–∏–¥–∏–º—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π',
      overallCondition: '–ó–¥–æ—Ä–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ',
      imagePath: 'assets/images/20200724_115413.jpg',
      imageUrl: null,
      analyzedAt: DateTime.now().toIso8601String(),
    );*/
    
    final reportService = ReportService();

    //final reportId = await reportService.saveReport(birchReport);
    for (final r in reports) {
      final reportId = await reportService.saveReport(r);
      if (!internetAvailable) {
        await queueDao.addTask(savedImage.path, reportId);
      }
    }

    if (!internetAvailable) {
      await AnalysisQueueDao().debugPrintQueue();
    }

    // 4. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –æ—Ç—á—ë—Ç–∞
    if (!mounted) return;
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => ReportScreen(reports: reports), // üëà –ª—É—á—à–µ —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫
      ),
    );
  } catch (e) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $e')),
    );
    Navigator.pop(context);
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            const Text('–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
          ],
        ),
      ),
    );
  }
}
