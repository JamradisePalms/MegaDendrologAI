import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;

import '../models/report.dart';
import '../services/api_service.dart';
import '../services/local_analysis.dart';
import 'report_screen.dart';
import '../services/report_service.dart';
import '../services/connectivity_service.dart';
import '../services/analysis_queue_dao.dart';
import 'crop_screen.dart';

class ProcessingScreen extends StatefulWidget {
  final File imageFile;
  final bool isCroppedByUser; // üëà –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

  const ProcessingScreen({
    super.key,
    required this.imageFile,
    this.isCroppedByUser = false, // üëà –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
  });

  @override
  _ProcessingScreenState createState() => _ProcessingScreenState();
}

class _ProcessingScreenState extends State<ProcessingScreen> {
  final ApiService _apiService = ApiService();
  final LocalAnalysis _localAnalysis = LocalAnalysis();
  final queueDao = AnalysisQueueDao();

  @override
  void initState() {
    super.initState();
    _analyze();
  }
  Future<void> _analyze() async {
    try {
      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      final docsDir = await getApplicationDocumentsDirectory();
      final fileName =
          'report_${DateTime.now().millisecondsSinceEpoch}${p.extension(widget.imageFile.path)}';
      final savedImage = await widget.imageFile.copy(p.join(docsDir.path, fileName));

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
      final internetAvailable = await ConnectivityService.hasInternet();

      List<Report> reports = [];
      if (internetAvailable) {
        debugPrint('–ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º ApiService –¥–ª—è —Ñ–∞–π–ª–∞: ${savedImage.path}');
        reports = await _apiService.analyzeImage(savedImage);
        //reports = await _localAnalysis.analyzeImage(savedImage);
      } else {
        debugPrint('–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º LocalAnalysis –¥–ª—è —Ñ–∞–π–ª–∞: ${savedImage.path}');
        debugPrint(widget.isCroppedByUser.toString());
        reports = await _localAnalysis.analyzeImage(
          savedImage,
          isCroppedByUser: widget.isCroppedByUser,
        );

      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—á—ë—Ç—ã
      if (reports.isEmpty) {
      if (!mounted) return;
      await showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: const Text('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞'),
          content: const Text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å–∞–º–∏'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context), // –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
              child: const Text('OK'),
            ),
          ],
        ),
      );

      // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ CropScreen
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (_) => CropScreen(imageFile: savedImage),
          ),
        );
      }
      return; // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

      // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –≤—Å–µ –æ—Ç—á—ë—Ç—ã
      final reportService = ReportService();
      for (final r in reports) {
        final reportId = await reportService.saveReport(r);
        if (!internetAvailable) {
          await queueDao.addTask(savedImage.path, reportId);
        }
      }

      if (!internetAvailable) {
        await AnalysisQueueDao().debugPrintQueue();
      }

      // 5. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –æ—Ç—á—ë—Ç–∞
      if (!mounted) return;
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (_) => ReportScreen(reports: reports),
        ),
      );
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: $e')),
      );
      Navigator.pop(context);
    }
  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            const Text('–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
          ],
        ),
      ),
    );
  }
}
